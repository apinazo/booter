<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>es.apinazo</groupId>
	<artifactId>booter</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>booter</name>
	<description>Spring Boot base for projects</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Actuator
		Adds utility endpoints such as /metrics or /health. -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring MVC
        Web support and embedded Tomcat server. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

		<!-- Lombok
		Annotations to avoid boilerplate code in POJOs. -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.16</version>
			<scope>provided</scope>
		</dependency>

		<!-- Apache Commons IO
		Set of utilities such as FileUtils -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- jsonrpc4j
		For creating JSON-RPC services.
	 	https://github.com/briandilley/jsonrpc4j -->
		<dependency>
			<groupId>com.github.briandilley.jsonrpc4j</groupId>
			<artifactId>jsonrpc4j</artifactId>
			<version>1.5.3</version>
		</dependency>

		<!-- RestAssured
		Utilities for integration testing of REST services
		-->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>3.0.7</version>
			<scope>test</scope>
		</dependency>

		<!-- RestAssured JSON schema validator
		Used to check if a given REST service respects its contract with a JSON schema definition.
		-->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>json-schema-validator</artifactId>
			<version>3.1.0</version>
			<exclusions>
				<!-- RestAssured uses and outdated version that conflicts with javax.mail -->
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mailapi</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Necessary for RestAssured. -->
		<dependency>
			<groupId>com.github.fge</groupId>
			<artifactId>json-schema-validator</artifactId>
			<version>2.2.6</version>
		</dependency>

		<!-- Necessary for RestAssured. -->
		<dependency>
			<groupId>com.github.fge</groupId>
			<artifactId>json-schema-core</artifactId>
			<version>1.2.5</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Builds fat jar. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Generates git commit info. -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<!-- Generate the git info file. -->
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
					<!-- Cancel packaging if git repository is dirty. -->
					<execution>
						<id>validate-the-git-infos</id>
						<goals>
							<goal>validateRevision</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
				<configuration>
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<prefix>git</prefix>
					<verbose>false</verbose>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
					<format>json</format>
					<gitDescribe>
						<skip>false</skip>
						<always>false</always>
						<dirty>-dirty</dirty>
					</gitDescribe>
					<validationProperties>
						<!-- Verify that the current repository is not dirty. -->
						<validationProperty>
							<name>validating git dirty</name>
							<value>${git.dirty}</value>
							<shouldMatchTo>false</shouldMatchTo>
						</validationProperty>
					</validationProperties>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
